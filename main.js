/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ABSPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  host: "",
  library: "",
  token: "",
  folder: "",
  template: "",
  sortBy: ""
};
var ABSPlugin = class extends import_obsidian.Plugin {
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new ABSPluginSettingTab(this.app, this));
    const ribbonIconEl = this.addRibbonIcon("audio-file", "ABS", () => {
      new import_obsidian.Notice("Fetching audiobooks...");
      this.fetchAndCreateNotes();
    });
    this.addCommand({
      id: "fetch-books",
      name: "Fetch books and create notes",
      callback: async () => {
        await this.fetchAndCreateNotes();
      }
    });
  }
  async fetchAndCreateNotes() {
    if (!this.settings.host || !this.settings.library || !this.settings.token) {
      new import_obsidian.Notice("Please configure API settings in the ABS Plugin settings.");
      return;
    }
    if (!this.settings.folder) {
      new import_obsidian.Notice("Please configure destination folder in the ABS Plugin settings.");
      return;
    }
    const apiUrl = `https://${this.settings.host}/api/libraries/${this.settings.library}/items?sort=media.metadata.title`;
    try {
      const response = await (0, import_obsidian.request)({
        url: apiUrl,
        method: "GET",
        headers: {
          Authorization: `Bearer ${this.settings.token}`
        }
      });
      if (!response) {
        throw new Error(`Failed to fetch books: ${response}`);
      }
      const data = JSON.parse(response);
      const books = (data.results || []).map((book) => {
        var _a;
        return {
          id: book.id,
          relPath: book.relPath,
          metadata: ((_a = book.media) == null ? void 0 : _a.metadata) || {}
        };
      }).sort((a, b) => a.relPath.localeCompare(b.relPath));
      const folder = this.app.vault.getAbstractFileByPath(this.settings.folder);
      if (!folder) {
        await this.app.vault.createFolder(this.settings.folder);
      }
      let abData = {};
      const abJsonData = {};
      for (const book of books) {
        var metadata = book.metadata;
        abJsonData.metadata = metadata;
        abJsonData.authorName = metadata.authorName;
        abJsonData.authorNameLF = metadata.authorNameLF;
        abJsonData.coverURL = `https://${this.settings.host}/audiobookshelf/api/items/${book.id}/cover`;
        abJsonData.description = metadata.description;
        abJsonData.jsonData = JSON.stringify(book, null, 2);
        abJsonData.narrator = metadata.narrator;
        abJsonData.publishedDate = metadata.publishedDate;
        abJsonData.publishedYear = metadata.publishedYear;
        abJsonData.publisher = metadata.publisher;
        abJsonData.title = metadata.title;
        const sanitizedTitle = metadata.title.replace(/[\/:*?"<>|]/g, "");
        var sortArtist = abJsonData.authorNameLF;
        if (this.settings.sortBy == "authorNameLF") {
          sortArtist = abJsonData.authorNameLF;
        } else if (this.settings.sortBy == "authorName") {
          sortArtist = abJsonData.authorName;
        }
        var filePath = `${this.settings.folder}/${sortArtist}/${sanitizedTitle}.md`;
        const regex = /\b\d+(\.\d+)?,/;
        if (book.metadata.seriesName != "") {
          var origName = book.metadata.seriesName;
          if (regex.test(origName)) {
            const parts = origName.split(/(?<=\b\d+(\.\d+)?),\s*/);
            origName = parts[0];
          }
          const seriesTitle = origName.replace(/\s+#\d+(\.\d+)?$/, "").trim();
          const numberMatch = origName.match(/\s+#(\d+(\.\d+)?)$/);
          const number = numberMatch ? numberMatch[1] : null;
          filePath = `${this.settings.folder}/${sortArtist}/${seriesTitle}/${number} | ${sanitizedTitle}.md`;
        }
        if (!this.app.vault.getAbstractFileByPath(filePath)) {
          await this.ensureFolderExists(filePath);
          await this.app.vault.create(filePath, this.getBookTemplate(abJsonData));
        } else {
        }
      }
      new import_obsidian.Notice("Books fetched and notes created successfully!");
    } catch (error) {
      console.error("Error fetching books:", error, " from ", apiUrl);
      new import_obsidian.Notice("Failed to fetch books. Check the console for details.");
    }
  }
  async ensureFolderExists(filePath) {
    const folderPath = filePath.substring(0, filePath.lastIndexOf("/"));
    if (!folderPath) return;
    const folder = this.app.vault.getAbstractFileByPath(folderPath);
    if (!folder) {
      await this.app.vault.createFolder(folderPath);
      console.log(`Created folder: ${folderPath}`);
    }
  }
  getBookTemplate(abJsonData) {
    return this.settings.template.replace(/{{(.*?)}}/g, (_, key) => {
      return abJsonData[key.trim()] || "";
    });
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var ABSPluginSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "ABS Plugin Settings" });
    new import_obsidian.Setting(containerEl).setName("API Host").setDesc("Enter the base URL of the API (without https://)").addText(
      (text) => text.setPlaceholder("example.abs.org").setValue(this.plugin.settings.host).onChange(async (value) => {
        this.plugin.settings.host = value.trim();
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Library").setDesc("Enter the library ID or name").addText(
      (text) => text.setPlaceholder("audiobooks").setValue(this.plugin.settings.library).onChange(async (value) => {
        this.plugin.settings.library = value.trim();
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("API Token").setDesc("Enter your API token").addText(
      (text) => text.setPlaceholder("your-token-here").setValue(this.plugin.settings.token).onChange(async (value) => {
        this.plugin.settings.token = value.trim();
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Folder").setDesc("Where to create pages.").addText(
      (text) => text.setPlaceholder("ABS").setValue(this.plugin.settings.folder).onChange(async (value) => {
        this.plugin.settings.folder = value.trim();
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("PAge Author Sort").setDesc("Sort new Pages. Default: By Author Name | LN, FN").addDropdown((dropdown) => {
      const options = {
        [
          "authorNameLF"
          /* authorNameLF */
        ]: "Author Name | LN, FN (Asc)",
        [
          "authorName"
          /* authorName */
        ]: "Author Name | FN, LN (Asc)"
      };
      dropdown.addOptions(options).setValue(this.plugin.settings.sortBy).onChange(
        async (value) => {
          console.log("value", value);
          this.plugin.settings.sortBy = value;
          await this.plugin.saveSettings();
        }
      );
    });
    new import_obsidian.Setting(containerEl).setName("Template").setDesc("Template for new pages.").addTextArea(
      (text) => text.setPlaceholder("<!--!>").setValue(this.plugin.settings.template).onChange(async (value) => {
        this.plugin.settings.template = value.trim();
        await this.plugin.saveSettings();
      })
    );
  }
};
//# sourceMappingURL=data:application/json;base64,
