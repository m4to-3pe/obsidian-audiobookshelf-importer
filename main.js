/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ABSPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  host: "",
  apiKey: "",
  abDir: "",
  abEnable: false,
  abLib: "",
  abSortBy: "",
  abTemplate: "",
  ebDir: "",
  ebEnable: false,
  ebLib: "",
  ebSortBy: "",
  ebTemplate: "",
  podDir: "",
  podEnable: false,
  podLib: "",
  podSortBy: "",
  podTemplate: ""
};
var ABSPlugin = class extends import_obsidian.Plugin {
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new ABSPluginSettingTab(this.app, this));
    const ribbonIconEl = this.addRibbonIcon("audio-file", "ABS", () => {
      this.fetchAndCreateNotes();
    });
    this.addCommand({
      id: "fetch-books",
      name: "Fetch books and create notes",
      callback: async () => {
        await this.fetchAndCreateNotes();
      }
    });
  }
  async fetchAndCreateNotes() {
    if (!this.settings.host || !this.settings.apiKey) {
      new import_obsidian.Notice("Please configure API settings in the Audiobookshelf Importer settings.");
      return;
    }
    if (this.settings.abEnable === false && this.settings.ebEnable === false && this.settings.podEnable === false) {
      new import_obsidian.Notice("Please enable a library to import in the Audiobookshelf Importer settings.");
      return;
    }
    if (this.settings.abEnable === true) {
      this.abImport();
    }
    if (this.settings.ebEnable === true) {
      this.ebImport();
    }
    if (this.settings.podEnable === true) {
      this.podImport();
    }
  }
  async abImport() {
    const apiUrl = `https://${this.settings.host}/api/libraries/${this.settings.abLib}/items?sort=media.metadata.title`;
    try {
      const response = await (0, import_obsidian.request)({
        url: apiUrl,
        method: "GET",
        headers: {
          Authorization: `Bearer ${this.settings.apiKey}`
        }
      });
      if (!response) {
        throw new Error(`Failed to fetch books: ${response}`);
      }
      const data = JSON.parse(response);
      const books = (data.results || []).map((book) => {
        var _a;
        return {
          id: book.id,
          relPath: book.relPath,
          metadata: ((_a = book.media) == null ? void 0 : _a.metadata) || {}
        };
      });
      const folder = this.app.vault.getAbstractFileByPath(this.settings.abDir);
      if (!folder) {
        await this.app.vault.createFolder(this.settings.abDir);
      }
      const abJsonData = {};
      for (const book of books) {
        var metadata = book.metadata;
        abJsonData.metadata = metadata;
        abJsonData.authorName = metadata.authorName;
        abJsonData.authorNameLF = metadata.authorNameLF;
        abJsonData.coverURL = `https://${this.settings.host}/audiobookshelf/api/items/${book.id}/cover`;
        abJsonData.description = metadata.description;
        abJsonData.jsonData = JSON.stringify(book, null, 2);
        abJsonData.narrator = metadata.narrator;
        abJsonData.publishedDate = metadata.publishedDate;
        abJsonData.publishedYear = metadata.publishedYear;
        abJsonData.publisher = metadata.publisher;
        abJsonData.title = metadata.title;
        const sanitizedTitle = metadata.title.replace(/[\/:*?"<>|]/g, "");
        var sortArtist = abJsonData.authorNameLF;
        if (this.settings.abSortBy == "authorNameLF") {
          sortArtist = abJsonData.authorNameLF;
        } else if (this.settings.abSortBy == "authorName") {
          sortArtist = abJsonData.authorName;
        }
        var filePath = `${this.settings.abDir}/${sortArtist}/${sanitizedTitle}.md`;
        const regex = /\b\d+(\.\d+)?,/;
        if (book.metadata.seriesName != "") {
          var origName = book.metadata.seriesName;
          if (regex.test(origName)) {
            const parts = origName.split(/(?<=\b\d+(\.\d+)?),\s*/);
            origName = parts[0];
          }
          const seriesTitle = origName.replace(/\s+#\d+(\.\d+)?$/, "").trim();
          const numberMatch = origName.match(/\s+#(\d+(\.\d+)?)$/);
          const number = numberMatch ? numberMatch[1] : null;
          filePath = `${this.settings.abDir}/${sortArtist}/${seriesTitle}/${number} | ${sanitizedTitle}.md`;
        }
        if (!this.app.vault.getAbstractFileByPath(filePath)) {
          await this.ensureFolderExists(filePath);
          await this.app.vault.create(filePath, this.getBookTemplate(abJsonData, this.settings.abTemplate));
        } else {
        }
      }
      new import_obsidian.Notice("Audiobooks fetched and notes created successfully!");
    } catch (error) {
      console.error("Error fetching Audiobooks:", error, " from ", apiUrl);
      new import_obsidian.Notice("Failed to fetch Audiobooks. Check the console for details.");
    }
  }
  async ebImport() {
    const apiUrl = `https://${this.settings.host}/api/libraries/${this.settings.ebLib}/items?sort=media.metadata.title`;
    try {
      const ebResponse = await (0, import_obsidian.request)({
        url: apiUrl,
        method: "GET",
        headers: {
          Authorization: `Bearer ${this.settings.apiKey}`
        }
      });
      if (!ebResponse) {
        throw new Error(`Failed to fetch books: ${ebResponse}`);
      }
      const data = JSON.parse(ebResponse);
      const ebBooks = (data.results || []).map((eBook) => {
        var _a;
        return {
          id: eBook.id,
          relPath: eBook.relPath,
          metadata: ((_a = eBook.media) == null ? void 0 : _a.metadata) || {}
        };
      });
      const folder = this.app.vault.getAbstractFileByPath(this.settings.ebDir);
      if (!folder) {
        await this.app.vault.createFolder(this.settings.ebDir);
      }
      const ebJsonData = {};
      for (const eBook of ebBooks) {
        var metadata = eBook.metadata;
        ebJsonData.metadata = metadata;
        ebJsonData.authorName = metadata.authorName;
        ebJsonData.authorNameLF = metadata.authorNameLF;
        ebJsonData.coverURL = `https://${this.settings.host}/audiobookshelf/api/items/${eBook.id}/cover`;
        ebJsonData.description = metadata.description;
        ebJsonData.jsonData = JSON.stringify(eBook, null, 2);
        ebJsonData.narrator = metadata.narrator;
        ebJsonData.publishedDate = metadata.publishedDate;
        ebJsonData.publishedYear = metadata.publishedYear;
        ebJsonData.publisher = metadata.publisher;
        ebJsonData.title = metadata.title;
        const sanitizedTitle = metadata.title.replace(/[\/:*?"<>|]/g, "");
        var ebSortArtist = ebJsonData.authorNameLF;
        if (this.settings.ebSortBy == "authorNameLF") {
          ebSortArtist = ebJsonData.authorNameLF;
        } else if (this.settings.ebSortBy == "authorName") {
          ebSortArtist = ebJsonData.authorName;
        }
        var filePath = `${this.settings.ebDir}/${ebSortArtist}/${sanitizedTitle}.md`;
        const regex = /\b\d+(\.\d+)?,/;
        if (eBook.metadata.seriesName != "") {
          var origName = eBook.metadata.seriesName;
          if (regex.test(origName)) {
            const parts = origName.split(/(?<=\b\d+(\.\d+)?),\s*/);
            origName = parts[0];
          }
          const seriesTitle = origName.replace(/\s+#\d+(\.\d+)?$/, "").trim();
          const numberMatch = origName.match(/\s+#(\d+(\.\d+)?)$/);
          const number = numberMatch ? numberMatch[1] : null;
          filePath = `${this.settings.ebDir}/${ebSortArtist}/${seriesTitle}/${number} | ${sanitizedTitle}.md`;
        }
        if (!this.app.vault.getAbstractFileByPath(filePath)) {
          await this.ensureFolderExists(filePath);
          await this.app.vault.create(filePath, this.getBookTemplate(ebJsonData, this.settings.ebTemplate));
        } else {
        }
      }
      new import_obsidian.Notice("eBooks fetched and notes created successfully!");
    } catch (error) {
      console.error("Error fetching eBooks:", error, " from ", apiUrl);
      new import_obsidian.Notice("Failed to fetch eBooks. Check the console for details.");
    }
  }
  async podImport() {
    const apiUrl = `https://${this.settings.host}/api/libraries/${this.settings.podLib}/items?sort=media.metadata.title`;
    try {
      const podResponse = await (0, import_obsidian.request)({
        url: apiUrl,
        method: "GET",
        headers: {
          Authorization: `Bearer ${this.settings.apiKey}`
        }
      });
      if (!podResponse) {
        throw new Error(`Failed to fetch books: ${podResponse}`);
      }
      const data = JSON.parse(podResponse);
      const podcasts = (data.results || []).map((podcast) => {
        var _a;
        return {
          id: podcast.id,
          relPath: podcast.relPath,
          metadata: ((_a = podcast.media) == null ? void 0 : _a.metadata) || {}
        };
      });
      const folder = this.app.vault.getAbstractFileByPath(this.settings.podDir);
      if (!folder) {
        await this.app.vault.createFolder(this.settings.podDir);
      }
      var epFilePath = "";
      const podJsonData = {};
      for (const podcast of podcasts) {
        var metadata = podcast.metadata;
        podJsonData.metadata = metadata;
        podJsonData.author = metadata.author;
        podJsonData.coverURL = metadata.imageUrl;
        podJsonData.description = metadata.description;
        podJsonData.jsonData = JSON.stringify(podcast, null, 2);
        podJsonData.narrator = metadata.narrator;
        podJsonData.publishedDate = metadata.publishedDate;
        podJsonData.publishedYear = metadata.publishedYear;
        podJsonData.publisher = metadata.publisher;
        podJsonData.title = metadata.title;
        const sanitizedTitle = metadata.title.replace(/[\/:*?"<>|]/g, "");
        var epApi = `https://${this.settings.host}/api/items/${podcast.id}?sort=publishedDate`;
        try {
          const epResponse = await (0, import_obsidian.request)({
            url: epApi,
            method: "GET",
            headers: {
              Authorization: `Bearer ${this.settings.apiKey}`
            }
          });
          if (!epResponse) {
            throw new Error(`Failed to fetch episodes: ${epResponse}`);
          }
          const epData = JSON.parse(epResponse);
          const episodes = (epData.media.episodes || []).map((episode) => ({
            oldEpisodeId: episode.oldEpisodeId,
            index: episode.index,
            season: episode.season,
            episode: episode.episode,
            episodeType: episode.episodeType,
            title: episode.title,
            subtitle: episode.subtitle,
            description: episode.description,
            pubDate: episode.pubDate,
            audioFile: episode.audioFile
          }));
          for (const episode of episodes) {
            podJsonData.metadata = JSON.stringify(episode.audioFile, null, 2);
            podJsonData.description = episode.description;
            podJsonData.jsonData = JSON.stringify(episode.audioFile, null, 2);
            podJsonData.publishedDate = episode.pubDate;
            podJsonData.publishedYear = episode.audioFile.metaTags.tagGenre;
            podJsonData.title = episode.title;
            const epSanitizedTitle = episode.title.replace(/[\/:*?"<>|]/g, "");
            epFilePath = `${this.settings.podDir}/${sanitizedTitle}/${epSanitizedTitle}.md`;
            if (!this.app.vault.getAbstractFileByPath(epFilePath)) {
              await this.ensureFolderExists(epFilePath);
              await this.app.vault.create(epFilePath, this.getBookTemplate(podJsonData, this.settings.podTemplate));
            } else {
            }
          }
        } catch (error) {
          console.error("Error fetching Episodes:", error, " from ", apiUrl);
          new import_obsidian.Notice("Failed to fetch Episodes. Check the console for details.");
        }
      }
      new import_obsidian.Notice("Podcasts fetched and notes created successfully!");
    } catch (error) {
      console.error("Error fetching Podcasts:", error, " from ", apiUrl);
      new import_obsidian.Notice("Failed to fetch Podcasts. Check the console for details.");
    }
  }
  async ensureFolderExists(filePath) {
    const folderPath = filePath.substring(0, filePath.lastIndexOf("/"));
    if (!folderPath) return;
    const folder = this.app.vault.getAbstractFileByPath(folderPath);
    if (!folder) {
      await this.app.vault.createFolder(folderPath);
      console.log(`Created folder: ${folderPath}`);
    }
  }
  getBookTemplate(jsonData, template) {
    return template.replace(/{{(.*?)}}/g, (_, key) => {
      return jsonData[key.trim()] || "";
    });
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
function addTextSetting(container, label, description, placeholder, settingKey) {
  const settingContainer = container.createDiv();
  settingContainer.createEl("label", { text: label, cls: "ab-setting-item-name" });
  new import_obsidian.Setting(settingContainer).setDesc(description).addText((text) => {
    text.setPlaceholder(placeholder).setValue(this.plugin.settings[settingKey]).onChange(async (value) => {
      this.plugin.settings[settingKey] = value;
      await this.plugin.saveSettings();
    });
    text.inputEl.style.width = "100%";
  });
}
function addDropdownSetting(container, label, settingKey, options) {
  const settingContainer = container.createDiv();
  settingContainer.createEl("label", { text: label, cls: "ab-setting-item-name" });
  new import_obsidian.Setting(settingContainer).addDropdown((dropdown) => {
    dropdown.addOptions(options).setValue(this.plugin.settings[settingKey]).onChange(async (value) => {
      console.log("value", value);
      this.plugin.settings[settingKey] = value;
      await this.plugin.saveSettings();
    });
    dropdown.selectEl.style.width = "100%";
  });
}
function addToggleSetting(container, label, description, settingKey, toggleCallback) {
  const settingContainer = container.createDiv();
  new import_obsidian.Setting(settingContainer).setName(label).setDesc(description).addToggle((toggle) => {
    toggle.setValue(this.plugin.settings[settingKey]).onChange(async (value) => {
      this.plugin.settings[settingKey] = value;
      await this.plugin.saveSettings();
      toggleCallback(value);
    });
  });
}
function addTextAreaSetting(container, label, placeholder, settingKey) {
  const settingContainer = container.createDiv();
  settingContainer.createEl("label", { text: label, cls: "ab-setting-item-name" });
  new import_obsidian.Setting(settingContainer).addTextArea((textArea) => {
    textArea.setPlaceholder(placeholder).setValue(this.plugin.settings[settingKey]).onChange(async (value) => {
      this.plugin.settings[settingKey] = value.trim();
      await this.plugin.saveSettings();
    });
    textArea.inputEl.style.height = "150px";
    textArea.inputEl.style.width = "100%";
  });
}
var ABSPluginSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Audiobookshelf Importer Settings" });
    addTextSetting.call(this, containerEl, "ABS Host", 'Enter the base URL (without "https://")', "example.abs.org", "host");
    addTextSetting.call(this, containerEl, "API Key", "Enter your API Key", "<apiKey>", "apiKey");
    addToggleSetting.call(this, containerEl, "Audiobooks", "Toggle to enable + show settings.", "abEnable", (value) => {
      abFieldsContainer.style.display = value ? "block" : "none";
    });
    const abWrapper = containerEl.createDiv({ cls: "stacked-inputs" });
    const abFieldsContainer = abWrapper.createDiv({ cls: "fields-container" });
    addTextSetting.call(this, abFieldsContainer, "Local Directory:", "", "ABS/Audiobooks", "abDir");
    addTextSetting.call(this, abFieldsContainer, "Library ID:", "", "ads76yfsd-sd767-p9aa-34dsd-989s8dasd", "abLib");
    addDropdownSetting.call(this, abFieldsContainer, "Page Sort:", "abSortBy", {
      ["authorName"]: "Author Name | FN, LN (Asc)",
      ["authorNameLF"]: "Author Name | LN, FN (Asc)"
    });
    addTextAreaSetting.call(this, abFieldsContainer, "Page Template:", "<!--!>", "abTemplate");
    abWrapper.appendChild(abFieldsContainer);
    abFieldsContainer.style.display = this.plugin.settings.abEnable ? "block" : "none";
    addToggleSetting.call(this, containerEl, "Ebooks", "Toggle to enable + show settings.", "ebEnable", (value) => {
      ebFieldsContainer.style.display = value ? "block" : "none";
    });
    const ebWrapper = containerEl.createDiv({ cls: "stacked-inputs" });
    const ebFieldsContainer = ebWrapper.createDiv({ cls: "fields-container" });
    addTextSetting.call(this, ebFieldsContainer, "Local Directory:", "", "ABS/Ebooks", "ebDir");
    addTextSetting.call(this, ebFieldsContainer, "Library ID:", "", "ads76yfsd-sd767-p9aa-34dsd-989s8dasd", "ebLib");
    addDropdownSetting.call(this, ebFieldsContainer, "Page Sort:", "ebSortBy", {
      ["authorName"]: "Author Name | FN, LN (Asc)",
      ["authorNameLF"]: "Author Name | LN, FN (Asc)"
    });
    addTextAreaSetting.call(this, ebFieldsContainer, "Page Template:", "<!--!>", "ebTemplate");
    ebWrapper.appendChild(ebFieldsContainer);
    ebFieldsContainer.style.display = this.plugin.settings.ebEnable ? "block" : "none";
    addToggleSetting.call(this, containerEl, "Podcasts", "Toggle to enable + show settings.", "podEnable", (value) => {
      podFieldsContainer.style.display = value ? "block" : "none";
    });
    const podWrapper = containerEl.createDiv({ cls: "stacked-inputs" });
    const podFieldsContainer = podWrapper.createDiv({ cls: "fields-container" });
    addTextSetting.call(this, podFieldsContainer, "Local Directory:", "", "ABS/Podcasts", "podDir");
    addTextSetting.call(this, podFieldsContainer, "Library ID:", "", "ads76yfsd-sd767-p9aa-34dsd-989s8dasd", "podLib");
    addDropdownSetting.call(this, podFieldsContainer, "Page Sort:", "podSortBy", {
      ["authorName"]: "Author Name | FN, LN (Asc)",
      ["authorNameLF"]: "Author Name | LN, FN (Asc)"
    });
    addTextAreaSetting.call(this, podFieldsContainer, "Page Template:", "<!--!>", "podTemplate");
    podWrapper.appendChild(podFieldsContainer);
    podFieldsContainer.style.display = this.plugin.settings.podEnable ? "block" : "none";
  }
};
//# sourceMappingURL=data:application/json;base64,
